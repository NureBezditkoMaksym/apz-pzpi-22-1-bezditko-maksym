Харківський університет радіоелектроніки
Факультет комп'ютерних наук
Кафедра програмної інженерії










ЗВІТ
з лабораторної роботи №5
з дисципліни "Архітектура програмного забезпечення"
на тему: "РОЗГОРТАННЯ ПРОГРАМНОЇ СИСТЕМИ ТА ДЕМОНСТРАЦІЯ ЇЇ РОБОТИ"


















Виконав
ст. гр. ПЗПІ-22-1
Бездітко Максим Андрійович


Перевірив
ст. викладач кафедри ПІ
Сокорчук Ігор Петрович


























Харків 2025 р.
1 ІСТОРІЯ ЗМІН


№
	Дата
	Версія звіту
	Опис змін та виправлень
	1
	11.05.2025
	0.1
	Створено документ, додано завдання та почато опис виконаної роботи.
	2
	11.05.2025
	0.2
	Додано опис функціоналу розгортання бази даних.
	3
	11.05.2025
	0.3
	Додано опис функціоналу розгортання серверної частини.
	4
	11.05.2025
	0.4
	Додано опис функціоналу розгортання iot-клієнта.
	5
	11.05.2025
	0.5
	Додано опис функціоналу розгортання веб-клієнта.
	6
	11.05.2025
	0.6
	Додано опис функціоналу розгортання мобільного клієнта.
	________________


2 ЗАВДАННЯ


Розгорнути програмну систему та продемонструвати її роботу.
________________


3 ОПИС ВИКОНАНОЇ РОБОТИ


Для розгортання серверної частини системи контролю здорового харчування використано платформу Supabase, яка надає зручні засоби для автоматичного деплою невеликих проєктів. У рамках бекенд-архітектури системи використовувався Supabase — як повноцінне хмарне рішення, що забезпечує зберігання даних у базі PostgreSQL, Edge Functions для обробки запитів та вбудовану систему автентифікації.
        На Supabase було створено базу даних із таблицями users, health_metrics, subscriptions, notifications, reports, user_roles, user_role_assignments, а також налаштовано функції безпеки, політики доступу та конфігурацію ролей. Автоматичне розгортання функцій здійснюється через Supabase CLI при оновленні відповідного репозиторію.
        Вебклієнт (адміністративна панель) було розгорнуто за допомогою Render як окремий статичний сайт. Для цього було створено новий Web Service, підключено GitHub-репозиторій, вказано команду npm run build і директорію dist як кореневу для деплою. Усі змінні середовища (VITE_SUPABASE_URL, VITE_SUPABASE_ANON_KEY тощо) додано в панелі налаштувань проєкту Render.
        Мобільний клієнт, реалізований на Swift із використанням SwiftUI та архітектури MVVM, наразі не розгортається як сервіс, а розповсюджується вручну: користувачі встановлюють його локально, або через TestFlight (у перспективі — через App Store). Усі API-запити мобільного додатку надсилаються безпосередньо до Supabase.
        Для повного розуміння загальної структури системи створено UML-діаграму розгортання. У центрі цієї діаграми знаходиться Supabase, який виступає одночасно сховищем даних і середовищем виконання серверної логіки. При пуші до GitHub функції оновлюються через Supabase CLI, а фронтенд-білд автоматично збирається і розгортається на Render. Взаємодія користувача з системою відбувається або через вебінтерфейс (Render-hosted фронтенд), або через мобільний застосунок (на iOS), який використовує ті самі REST-ендпоїнти Supabase.
        Таким чином, повний потік виглядає наступним чином:
* локальна машина збирає зміни (наприклад, npm run build для фронтенду);

* оновлені файли пушаться до GitHub;
* Render автоматично тригерить збірку фронтенду;
* Supabase оновлює функції та міграції при необхідності;
* мобільний застосунок або вебінтерфейс надсилають запити до Supabase, де відбувається обробка логіки та доступ до PostgreSQL.
        
У результаті користувач отримує стабільний і швидкий доступ до всіх ключових функцій системи через мобільний застосунок або вебінтерфейс.
        Запис відеопрезентації з описом проєкту було підготовлено та завантажено на сервіс YouTube. Посилання на відео та хронологічну транскрипцію наведено в додатку А.
















































4 ВИСНОВКИ


        У ході виконання роботи було розгорнуто програмну систему та продемонстровано її роботу.


________________


ДОДАТОК А
ВІДЕОЗАПИС


Відеозапис презентації результатів лабораторної роботи: https://youtu.be/Yfet8233erM


Хронологічний опис відеозапису:
00:00 Вступ: студент Бездітко Максим презентує результат п’ятої лабораторної роботи з АПЗ на тему розгортання програмної системи.
00:20 Згадка про виконавця та викладача.
00:30 Історія змін та завдання лабораторної роботи.
00:41 Мета: розгортання та демонстрація роботи системи.
00:52 Серверна частина та база даних — Supabase як хмарне комплексне рішення.
01:12 Вебклієнт з адмін-панеллю — розгортання через Render як статичний сайт.
01:25 GitHub-репозиторій, скрипти, змінні оточення.
01:48 Мобільний клієнт — розгортання через TestFlight, потенційна публікація в App Store.
01:59 Мова Swift та SwiftUI, архітектура MVVM.
02:08 Створена UML-діаграма розгортання для загального розуміння архітектури.
02:19 Render: автоматичний деплой при push'і на GitHub.
02:40 Supabase: ручне розгортання функцій і БД.
02:57 Опис послідовності розгортання, переходи до додатків.
03:09 Висновок: система повністю розгорнута й працює, мету виконано.
03:21 Згадка про відео на YouTube та майбутнє додавання лінку й таймкодів.
03:31 UML-діаграма розгортання: потік від локальної машини до користувача.
03:56 Користувач взаємодіє з клієнтами, Supabase.
04:06 Перелік функцій Supabase, панелі керування.
04:22 Демонстрація скриптів для FE/BE, автоматизація.
04:51 Перевірка консистентності між клієнтами (IoT і Web).
05:10 Вхід у систему, перевірка Health Metrics.
05:50 Видалення записів, оновлення UI, перегляд профілю.
06:00 IoT: логіка ліхтарика при відсутності метрик.
06:23 Перезапуск клієнта, вхід, перевірка наявності даних.
07:01 Додано метрику — ліхтарик гасне, все працює.
07:36 Видалення метрики — ліхтарик знову загоряється.
08:22 Додавання нових даних через Arduino (IoT) — оновлення стану.
08:50 Повторна перевірка — підтвердження консистентності системи.
09:02 Supabase: база даних PostgreSQL + Edge Functions.
09:19 Render: вебдодаток, історія деплоїв.
09:39 Логи, посилання на активний деплой, перевірка дешборду.
09:53 Формування звітності — перевірка передачі даних.
10:04 Підтвердження — збережені 300 калорій із IoT.
10:08 Завершення — подяка, ім’я, номер групи, номер роботи.




________________


ДОДАТОК Б
ГРАФІЧНІ МАТЕРІАЛИ


  

Рисунок Б.1 — UML-діаграма розгортання системи


  

Рисунок Б.2 — Панель керування серверною частиною


  

Рисунок Б.3 — Панель керування базою даних
  

Рисунок Б.4 — Панель керування вебклієнтом
________________
ДОДАТОК В
ПРОГРАМНИЙ КОД


В.1 Скрипт розгортання backend-частини системи.
Репозиторій: https://github.com/NureBezditkoMaksym/apz-pzpi-22-1-bezditko-maksym/blob/main/Lab5/pzpi-22-1-bezditko-maksym-lab5-code/deploy-backend.sh
1 supabase functions deploy
2 supabase db push


В.1 Скрипт розгортання frontend-частини системи.
Репозиторій: https://github.com/NureBezditkoMaksym/apz-pzpi-22-1-bezditko-maksym/blob/main/Lab5/pzpi-22-1-bezditko-maksym-lab5-code/deploy-frontend.sh
1 git add -A
2 git commit -m "predeploy commit"
3 git push
4 
5 # render.com will pick up the new changes and redeploy the app