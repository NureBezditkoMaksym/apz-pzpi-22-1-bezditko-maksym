Харківський університет радіоелектроніки
Факультет комп'ютерних наук
Кафедра програмної інженерії






ЗВІТ
з практичної роботи №1
з дисципліни "Архітектура програмного забезпечення"
на тему: "Патерн проєктування Будівельник"













Виконав
ст. гр. ПЗПІ-22-1
Бездітко Максим Андрійович

Перевірив
Лещинський Володимир Олександрович












Харків 2025 р.
1 ІСТОРІЯ ЗМІН

№
Дата
Версія звіту
Опис змін та виправлень
1
08.03.2025
0.1
Створено та наповнено розділ “Завдання”
2
08.03.2025
0.2
Створено та наповнено розділ “Опис виконаної роботи”
3
08.03.2025
0.3
Створено та наповнено розділ “Висновки”
4
08.03.2025
0.4
Додано додаток А
5
08.03.2025
0.5
Додано додаток Б
6
08.03.2025
0.6
Додано додаток В


2 ЗАВДАННЯ

Ознайомитися з патернами проєктування програмного забезпечення та навчитися їх правильно застосовувати на практиці.

3 ОПИС ВИКОНАНОЇ РОБОТИ

Темою роботи був обраний патерн Builder (Будівельник). 
	Знайдемо необхідну інформацію про нього, спираючись на відповідну літературу, та узагальнимо отримані знання у вигляді доповіді. На основі цієї доповіді буде створено презентацію, яка коротко і структуровано відображатиме ключові аспекти патерна Builder. 
	Для демонстрації ходу виконання роботи буде підготовлено звіт, що включатиме посилання на відеозапис виступу з доповіддю, хронологічний опис відео у додатку А, слайди презентації у додатку Б та приклади програмного коду, що демонструють реалізацію патерна Builder, у додатку В.

4 ВИСНОВКИ

	У ході виконання роботи було вивчено основні патерни проєктування програмного забезпечення та створено презентацію на відповідну тему.

ДОДАТОК А
ВІДЕОЗАПИС

Відеозапис презентації результатів лабораторної роботи: https://youtu.be/OGgwowy6bLA

Хронологічний опис відеозапису:
00:00 Вступ — представлення студента Бездітка Максима, група ПЗПІ-221.
00:03 Тема роботи — практичне завдання №1 з темою «Патерн проєктування Builder».
00:07 Завдання — ознайомлення з патерном та навчання його правильному використанню.
00:14 Історія змін — коротка згадка про оновлення та зміст виконаної роботи.
00:20 Мета — пошук інформації, створення презентації, демонстрація на Python.
00:27 Теоретичне пояснення — що таке Builder, суть підходу та принцип поетапного створення.
00:33 Приклад — пояснення логіки роботи з екземпляром, додавання властивостей.
00:45 Структура презентації — мотивація, визначення, коли використовувати.
01:01 Компоненти патерна — опис основних складових: Product, Builder, Director.
01:14 UML-діаграма — згадка про графічну схему взаємодії класів.
01:39 Приклад коду — реалізація патерна Builder на Python, приклад з Burger.
01:52 Посилання — згадка про доданий код у додатках та GitHub-репозиторій.
02:01 Клас Burger — створення продукту та його властивостей.
02:17 Клас Builder — ініціалізація об’єкта та методи добудови.
02:36 Клас Director — інкапсуляція логіки, пояснення його необов’язковості.
02:55 Демонстрація використання — створення об’єкта та додавання частин.
03:15 Висновок — підсумок роботи, користь патерна Builder, подяка за увагу.
ДОДАТОК Б
ГРАФІЧНІ МАТЕРІАЛИ


Рисунок Б.1 - Початковий слайд


Рисунок Б.2 - Мотивація використання


Рисунок Б.3 - Визначення


Рисунок Б.4 - Коли використовувати


Рисунок Б.5 - Основні компоненти


Рисунок Б.6 - UML-діаграма


Рисунок Б.7 - Приклад реалізації на Python


Рисунок Б.8 - Переваги та недоліки


Рисунок Б.9 - Висновки



Рисунок Б.10 - Джерела
ДОДАТОК В
ПРОГРАМНИЙ КОД

В.1 Приклад програмного коду для шаблону Будівельник.
Репозиторій: https://github.com/NureBezditkoMaksym/apz-pzpi-22-1-bezditko-maksym/blob/main/Pract1/pzpi-22-1-bezditko-maksym-design-pattern/code-examples-design-pattern.py
 1  # Product
 2  class Burger:
 3      def __init__(self):
 4          self.parts = []
 5
 6      def add(self, part):
 7          self.parts.append(part)
 8
 9      def describe(self):
10          return "Burger with: " + ", ".join(self.parts)
11
12
13  # Builder
14  class BurgerBuilder:
15      def __init__(self):
16          self.burger = Burger()
17
18      def add_bun(self):
19          self.burger.add("bun")
20          return self
21
22      def add_patty(self):
23          self.burger.add("beef patty")
24          return self
25
26      def add_lettuce(self):
27          self.burger.add("lettuce")
28          return self
29
30      def add_cheese(self):
31          self.burger.add("cheese")
32          return self
33
34      def build(self):
35          return self.burger
36
37
38  # Director (optional)
39  class BurgerDirector:
40      def __init__(self, builder):
41          self.builder = builder
42
43      def make_classic_burger(self):
44          return self.builder.add_bun().add_patty().add_lettuce().add_cheese().build()
45
46
47  # Usage
48  if __name__ == "__main__":
49      builder = BurgerBuilder()
50      director = BurgerDirector(builder)
51      burger = director.make_classic_burger()
52      print(burger.describe())


